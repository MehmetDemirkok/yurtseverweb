generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // PostgreSQL bağlantı URL'i
  directUrl = env("DIRECT_URL") // Doğrudan veritabanı bağlantısı
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  password  String
  role      Role     @default(USER)
  permissions String[] @default([])
  logs      Log[]    // Kullanıcının yaptığı işlemlerin logları
  transactions Transaction[] // Kullanıcının finans işlemleri
}

model Accommodation {
  id              Int     @id @default(autoincrement())
  adiSoyadi       String
  unvani          String
  ulke            String
  sehir           String
  girisTarihi     String
  cikisTarihi     String
  odaTipi         String
  konaklamaTipi   String
  faturaEdildi    Boolean
  gecelikUcret    Float
  toplamUcret     Float
  organizasyonAdi String?
  otelAdi         String?
  kurumCari       String?
  numberOfNights  Int?
  sales           Sale[]
}

model Sale {
  id              Int        @id @default(autoincrement())
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id], onDelete: SetNull)
  accommodationId Int?
  organizasyonAdi String
  kurumCari       String?   // Kurum Cari bilgisi eklendi
  fiyat           Float
  createdAt       DateTime   @default(now())
  status          SaleStatus @default(AKTARILDI)
  accommodationData String?  // Konaklama kaydının JSON verisi
}

// Yeni Log modeli
model Log {
  id          Int       @id @default(autoincrement())
  action      String    // Yapılan işlem: DELETE, UPDATE, CREATE
  modelName   String    // İşlem yapılan model: Accommodation, Sale
  recordId    Int       // İşlem yapılan kaydın ID'si
  recordData  String    // Silinen/değiştirilen kaydın JSON verisi
  userId      Int?      // İşlemi yapan kullanıcı ID'si (nullable)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt   DateTime  @default(now())
  ipAddress   String?   // İşlemi yapan kullanıcının IP adresi
  userAgent   String?   // İşlemi yapan kullanıcının tarayıcı bilgisi
}

enum Role {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum SaleStatus {
  AKTARILDI
  FATURALANDI
  IPTAL
}

model Transaction {
  id          Int       @id @default(autoincrement())
  type        TransactionType
  description String
  amount      Float
  date        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?      // İşlemi yapan kullanıcı ID'si (nullable)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum TransactionType {
  ALIS
  SATIS
}
