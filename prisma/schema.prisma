generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  password     String
  role         Role          @default(USER)
  permissions  String[]      @default([])
  logs         Log[]
  transactions Transaction[]
}

model Accommodation {
  id              Int     @id @default(autoincrement())
  adiSoyadi       String
  unvani          String
  ulke            String
  sehir           String
  girisTarihi     String
  cikisTarihi     String
  odaTipi         String
  konaklamaTipi   String
  faturaEdildi    Boolean
  gecelikUcret    Float
  toplamUcret     Float
  organizasyonAdi String?
  otelAdi         String?
  kurumCari       String?
  numberOfNights  Int?
  sales           Sale[]
}

model Sale {
  id                Int            @id @default(autoincrement())
  organizasyonAdi   String
  fiyat             Float
  createdAt         DateTime       @default(now())
  status            SaleStatus     @default(AKTARILDI)
  accommodationId   Int?
  accommodationData String?
  kurumCari         String?
  accommodation     Accommodation? @relation(fields: [accommodationId], references: [id])
}

model Log {
  id         Int      @id @default(autoincrement())
  action     String
  modelName  String
  recordId   Int
  recordData String
  userId     Int?
  createdAt  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  user       User?    @relation(fields: [userId], references: [id])
}

model Transaction {
  id          Int             @id @default(autoincrement())
  type        TransactionType
  description String
  amount      Float
  date        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  userId      Int?
  user        User?           @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum SaleStatus {
  AKTARILDI
  FATURALANDI
  IPTAL
}

enum TransactionType {
  ALIS
  SATIS
}

// Transfer Modülü Tabloları
model Arac {
  id              String    @id @default(cuid())
  plaka           String    @unique
  marka           String
  model           String
  yolcuKapasitesi Int
  durum           AracDurum @default(MUSAIT)
  enlem           Float     @default(0)
  boylam          Float     @default(0)
  sonGuncelleme   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  soforler        Sofor[]
  transferler     Transfer[]
}

model Sofor {
  id            String      @id @default(cuid())
  ad            String
  soyad         String
  telefon       String      @unique
  ehliyetSinifi String
  atananAracId  String?
  durum         SoforDurum  @default(MUSAIT)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  atananArac    Arac?       @relation(fields: [atananAracId], references: [id])
  transferler   Transfer[]
}

model Transfer {
  id           String         @id @default(cuid())
  kalkisYeri   String
  varisYeri    String
  kalkisSaati  String
  kalkisTarihi DateTime
  yolcuSayisi  Int
  aracId       String?
  soforId      String?
  durum        TransferDurum  @default(BEKLEMEDE)
  notlar       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  arac         Arac?          @relation(fields: [aracId], references: [id])
  sofor        Sofor?         @relation(fields: [soforId], references: [id])
}

enum AracDurum {
  MUSAIT
  TRANSFERDE
  BAKIMDA
}

enum SoforDurum {
  MUSAIT
  TRANSFERDE
  IZINLI
}

enum TransferDurum {
  BEKLEMEDE
  YOLDA
  TAMAMLANDI
  IPTAL
}
